@page "/importsaisie"
@using ProfLayout
@layout ProfLayout
@using Frontend.Services
@inject AuthService AuthService
@using OfficeOpenXml;
@inject HttpClient Http
@using Microsoft.AspNetCore.Components.Forms;


<div @onmousemove="OnMouseMove">

	@if (isValid)
	{
		<div>
			<h3 class="table-title">Options</h3>
			<div class="d-flex justify-content-between align-items-center bg-light p-3 mb-3">
				<div class="form-group mx-2">
					<label for="annee">Année :</label>
					<select id="annee" class="form-control" @bind="SelectedAnnee" disabled="@((!Annees.Any())||isLocked)">
						@foreach (var annee in Annees)
						{
							<option value="@annee">@annee</option>
						}
					</select>
				</div>

				<div class="form-group mx-2">
					<label for="classe">Classe :</label>
					<select id="classe" class="form-control" @onchange="OnClasseChanged" disabled="@((!Classes.Any())||isLocked)">
						@foreach (var classe in Classes)
						{
							<option value="@classe">@classe</option>
						}
					</select>
				</div>

				<div class="form-group mx-2">
					<label for="semestre">Semestre :</label>
					<select id="semestre" class="form-control" @onchange="OnSemestreChanged" disabled="@((!Semestres.Any())||isLocked)">
						@foreach (var semestre in Semestres)
						{
							<option value="@semestre">@semestre</option>
						}
					</select>
				</div>

				<div class="form-group mx-2">
					<label for="ue">UE :</label>
					<select id="ue" class="form-control" @onchange="OnUEChanged" disabled="@((!UEs.Any())||isLocked)">
						@foreach (var ue in UEs)
						{
							<option value="@ue">@ue</option>
						}
					</select>
				</div>


				<div class="form-group mx-2">
					<label for="evaluation">Évaluation :</label>
					<select id="evaluation" class="form-control" @onchange="OnEvaluationChange" disabled="@((!Evaluations.Any())||isLocked)">
						@foreach (var eval in Evaluations)
						{
							<option value="@eval">@eval</option>
						}
					</select>
				</div>

				<div class="form-group mx-2">
					<label for="echelle">Échelle :</label>
					<select id="echelle" class="form-control" @onchange="OnEchelle" disabled="@((Echelles != 0)||isLocked)">
						@if (Echelles == 0)
						{
							@for (int i = 10; i <= 100; i += 10)
							{
								<option value="@i">@i</option>
							}
						}
						else
						{
							<option value="@Echelles">@Echelles</option>
						}
					</select>
				</div>
			</div>

			<!-- Bouton Verrouiller / Déverrouiller -->
			<button type="button" class="btn btn-primary mb-3" @onclick="ToggleLockState">@lockButtonText</button>

			<h3 class="table-title">Importer depuis un fichier excel</h3>
			<div class="d-flex justify-content-between align-items-center bg-light p-3 mb-3">
				<div class="form-group mx-2">
					<InputFile OnChange="UploadFile" class="form-control" accept=".xls,.xlsx" disabled="@(!isLocked)"/>
				</div>
				<div class="form-group mx-2">
					<button class="btn btn-primary" @onclick="LoadNotesTest" disabled="@(!isLocked)">Charger</button>
				</div>
			</div>

			@if (!string.IsNullOrEmpty(importMessage))
			{
				<div class="alert alert-info mt-2">@importMessage</div>
			}
			<!-- Affichage de la saisie selon l'évaluation -->
			@if (SelectedEvaluation == "SN")
			{
				<h3 class="table-title">Saisir manuellement</h3>
				<div class="d-flex justify-content-between align-items-center bg-light p-3 mb-3">
					<div class="form-group mx-2">
						<label for="NumAnonymat">NumAnonymat</label>
						<input type="text" class="form-control mx-2" placeholder="NumAnonymat" @bind="numAnonymat" disabled="@(!isLocked)" />
					</div>
					<div class="form-group mx-2">
						<label for="Note">Note</label>
						<input type="text" class="form-control mx-2" placeholder="Note" @bind="note" disabled="@(!isLocked)" />
					</div>
					<div class="form-group mx-2">
						<label for="Observation">Observation</label>
						<input type="text" class="form-control mx-2" placeholder="Observation" @bind="observation" disabled="@(!isLocked)" />
					</div>
					<div class="form-group mx-2">
						@if (isEditing)
						{
							<button type="button" class="btn btn-success mt-2" @onclick="SaveNote">Enregistrer</button>
							<button type="button" class="btn btn-secondary mt-2" @onclick="CancelEdit">Annuler</button>
						}
						else
						{
							<button type="button" class="btn btn-primary mt-2" @onclick="InsertNote" disabled="@(!isLocked)">Insérer</button>
						}
					</div>
				</div>

				@if (!string.IsNullOrEmpty(insertnoteMessage))
				{
					<div class="alert alert-info mt-2">@insertnoteMessage</div>
				}
			}
			else
			{
				<h3 class="table-title">Saisir manuellement</h3>
				<div class="d-flex justify-content-between align-items-center bg-light p-3 mb-3">
					<div class="form-group mx-2">
						<label for="Matricule">Matricule</label>
						<input type="text" class="form-control mx-2" placeholder="Matricule" @bind="matricule" disabled="@(!isLocked)" />
					</div>
					<div class="form-group mx-2">
						<label for="Non">Nom et Prenoms</label>
						<input type="text" class="form-control mx-2" placeholder="Nom et Prenoms" @bind="nomPrenom" disabled="@(!isLocked)" />
					</div>
					<div class="form-group mx-2">
						<label for="Note">Note</label>
						<input type="text" class="form-control mx-2" placeholder="Note" @bind="note" disabled="@(!isLocked)" />
					</div>
					<div class="form-group mx-2">
						<label for="Observation">Observation</label>
						<input type="text" class="form-control mx-2" placeholder="Observation" @bind="observation" disabled="@(!isLocked)" />
					</div>
					<div class="form-group mx-2">
						@if (isEditing)
						{
							<button type="button" class="btn btn-success mt-2" @onclick="SaveNote">Enregistrer</button>
							<button type="button" class="btn btn-secondary mt-2" @onclick="CancelEdit">Annuler</button>
						}
						else
						{
							<button type="button" class="btn btn-primary mt-2" @onclick="InsertNote" disabled="@(!isLocked)">Insérer</button>
						}
					</div>
				</div>
				@if (!string.IsNullOrEmpty(insertnoteMessage))
				{
					<div class="alert alert-info mt-2">@insertnoteMessage</div>
				}
			}

			@if (isLoading)
			{
				<p>Chargement des notes...</p>
			}
			else if (notes.Count == 0)
			{
				<p class="text-warning">Aucune note trouvée.</p>
			}
			else
			{
				if (!string.IsNullOrEmpty(errorMessage))
				{
					<p class="text-danger">@errorMessage</p>
				}
				@if (SelectedEvaluation == "SN")
				{
					<h3 class="table-title">Liste des Notes avec anonymats</h3>
				}
				else
				{
					<h3 class="table-title">Liste des Notes sans anonymats</h3>
				}

				<table class="professional-table mt-3">
					<thead>
						<tr>
							<th class="table-header">No</th>
							@if (SelectedEvaluation == "SN")
							{
								<th class="table-header">Numéro Anonymat</th>
							}
							else
							{
								<th class="table-header">Matricule</th>
								<th class="table-header">Nom & Prénom</th>
							}
							<th class="table-header">Note</th>
							<th class="table-header">Observation</th>
							<th class="table-header">Actions</th>
						</tr>
					</thead>
					<tbody>
						@{
							int index = 1;
						}
						@foreach (var note in notes)
						{
							<tr>
								<td class="table-data">@index</td>
								@if (SelectedEvaluation == "SN")
								{
									<td class="table-data">@note.NumAnonymat</td>
								}
								else
								{
									<td class="table-data">@note.Matricule</td>
									<td class="table-data">@note.NomPrenom</td>
								}
								<td class="table-data">@note.Note</td>
								<td class="table-data">@note.Observation</td>
								<td>
									<button class="btn btn-success btn-sm" @onclick="() => EditNote(note)">Modifier</button>
									<button class="btn btn-danger btn-sm" @onclick="() => DeleteNote(note)">Supprimer</button>
								</td>
							</tr>
							index++;
						}
					</tbody>
				</table>
			}
			<!-- Bouton de validation -->
			<button class="btn btn-success mt-3" @onclick="InsertIntoBD">Valider</button>
		</div>
	}
</div>


@code {

	private bool isValid = false;
	private bool isLocked = false;
	private string lockButtonText = "Verrouiller";
	private bool hasRendered = false;

	[Parameter] public EventCallback<string> OnSelectionChanged { get; set; }

	private List<string> Annees = new();
	private List<string> Semestres = new();
	private List<string> Classes = new();
	private List<string> UEs = new();
	private List<string> Evaluations = new();
	private int Echelles ;

	private string? SelectedAnnee = "";
	private string? SelectedSemestre = "";
	private string? SelectedClasse = "";
	private string? SelectedUE = "";
	private string? SelectedEvaluation = "";
	private int? SelectedEchelle;

	//Les variables pour la section de saisi des notes:
	private IBrowserFile? selectedFile = null;
	private string importMessage = "";
	private string matricule = "";
	private string nomPrenom = "";
	private string numAnonymat = "";
	private double note = 0;
	private string observation = "";
	private string insertnoteMessage = "";

	protected override async Task OnInitializedAsync()
	{
		await LoadData();
	}

	//A chaque rafraichissement, recharger les donnees
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			hasRendered = true;
			await LoadData();
			await Credit();
			isValid = await AuthService.ValidateTokenAsync();
			StateHasChanged();
		}
	}


	//Verifier que le token est valide a chaque mouvement de la souris
	private async Task OnMouseMove(MouseEventArgs e)
	{
		if (hasRendered) // S'assure que le rendu initial est terminé
		{
			await CheckToken();
		}
	}


	//Verifier la validite du token
	private async Task CheckToken()
	{
		isValid = await AuthService.ValidateTokenAsync();
	}

	//Charger les autres donnees en fonction de la classe choisi choisi (UEs)
	private async Task OnClasseChanged(ChangeEventArgs e)
	{
		SelectedClasse = e.Value?.ToString();
		await LoadUEs();
		await Credit();
	}

	//Charger les autres donnees en fonction du semestre choisi (Credit et UEs)
	private async Task OnSemestreChanged(ChangeEventArgs e)
	{
		SelectedSemestre = e.Value?.ToString();
		await LoadUEs();
		await Credit();
	}

	//Charger les autres donnees en fonction de l'UE choisi (Credit)
	private async Task OnUEChanged(ChangeEventArgs e)
	{
		// Récupère la valeur de l'option sélectionnée (l'UE)
		SelectedUE = e.Value?.ToString();
		await Credit();
	}
	private int? Echellesss;
	private void OnEchelle(ChangeEventArgs e)
	{
		Echellesss = Convert.ToInt32(e.Value); if (int.TryParse(e.Value?.ToString(), out int selectedValue))
		{
		}
	}

	//Charger les autres donnees en fonction du type d'evaluation choisi (Credit)
	private async Task OnEvaluationChange(ChangeEventArgs e)
	{
		SelectedEvaluation = e.Value?.ToString();
		await Credit();
	}

	private async Task ToggleLockState()
	{
		isLocked = !isLocked;
		lockButtonText = isLocked ? "Déverrouiller" : "Verrouiller";
		SelectedEchelle = Echellesss;
		if (isLocked)
		{
			await LoadNotes(); // Charge les étudiants (les notes dans ce cas) quand l'état est verrouillé
		}
	}

	private void UploadFile(InputFileChangeEventArgs e)
	{
		selectedFile = e.File;
	}


	private List<EtudiantNote> ReadExcel(Stream stream)
	{
		ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
		var notesList = new List<EtudiantNote>();
		using var package = new OfficeOpenXml.ExcelPackage(stream);
		var worksheet = package.Workbook.Worksheets[0];
		int rowCount = worksheet.Dimension.Rows;

		Console.WriteLine($"Lecture du fichier Excel avec {rowCount} lignes.");

		for (int row = 2; row <= rowCount; row++) // Ignorer la première ligne (en-têtes)
		{
			if (SelectedEvaluation == "SN")
			{
				notesList.Add(new EtudiantNote
					{
						NumAnonymat = worksheet.Cells[row, 2].Text.Trim(),
						Note = double.TryParse(worksheet.Cells[row, 3].Text, out double note) ? note : 0,
						Observation = worksheet.Cells[row, 4].Text.Trim()
					});
			}
			else
			{
				notesList.Add(new EtudiantNote
					{
						Matricule = worksheet.Cells[row, 2].Text.Trim(),
						NomPrenom = worksheet.Cells[row, 3].Text.Trim(),
						Note = double.TryParse(worksheet.Cells[row, 4].Text, out double note) ? note : 0,
						Observation = worksheet.Cells[row, 5].Text.Trim()
					});
			}
		}

		return notesList;
	}

	private async void LoadNotesTest()
	{
		var file = selectedFile;
		if (file != null)
		{
			isLoading = true;
			errorMessage = "";
			notes = new List<EtudiantNote>();
			StateHasChanged(); // Mettre à jour l'interface pour afficher le message de chargement

			try
			{
				using var stream = file.OpenReadStream(10 * 1024 * 1024); // Limite de 10MB
				using var memoryStream = new MemoryStream();
				await stream.CopyToAsync(memoryStream);
				memoryStream.Position = 0;
				notes = ReadExcel(memoryStream);
				Console.WriteLine($"Fichier téléchargé et {notes.Count} notes lues.");
			}
			catch (Exception ex)
			{
				errorMessage = $"Erreur lors de la lecture du fichier: {ex.Message}";
				Console.WriteLine($"Erreur lors de la lecture du fichier: {ex.Message}");
			}
			finally
			{
				isLoading = false;
				StateHasChanged(); // Mettre à jour l'interface après le chargement
			}
		}
	}

	private void SaveNote()
	{
		int index = notes.FindIndex(n => n.Matricule == selectedNote.Matricule || n.NumAnonymat == selectedNote.NumAnonymat);


		// Appliquer les modifications à la note sélectionnée dans la liste
		if (selectedNote != null)
		{
			notes[index].Matricule = matricule;
			notes[index].NomPrenom = nomPrenom;
			notes[index].NumAnonymat = numAnonymat;
			notes[index].Note = note;
			notes[index].Observation = observation;
		}

		CancelEdit();
	}
	private void CancelEdit()
	{
		// Réinitialiser les champs avec les valeurs de la note initiale
		matricule = string.Empty;
		nomPrenom = string.Empty;
		numAnonymat = string.Empty;
		note = 0;
		observation = string.Empty;
		isEditing = false;
	}

	private void DeleteNote(EtudiantNote note)
	{
		notes.Remove(note);
		StateHasChanged();
	}

	private async Task LoadUEs()
	{
		if (!string.IsNullOrEmpty(SelectedClasse) && !string.IsNullOrEmpty(SelectedSemestre))
		{
			try
			{
				var url = $"http://localhost:5043/api/Options/ues?semestre={SelectedSemestre}&codeClasse={SelectedClasse}";
				var responses = await Http.GetFromJsonAsync<List<string>>(url);
				UEs = responses ?? new List<string>();
				SelectedUE = responses?.FirstOrDefault();
				await Credit();
			}
			catch (Exception ex)
			{
				Console.WriteLine("Erreur de chargement des UEs: " + ex.Message);
				UEs = new List<string>();
			}
		}
		else
		{
			UEs.Clear();
		}
	}

	private async Task LoadData()
	{
		try
		{
			var response = await Http.GetFromJsonAsync<OptionsResponse>("http://localhost:5043/api/Options/combinations");
			if (response != null)
			{
				Annees = response.Annee;
				Semestres = response.Semestres;
				Classes = response.Classes;
				Evaluations = response.Evaluations;

				// Sélection des premières valeurs par défaut si disponibles
				SelectedAnnee = Annees.FirstOrDefault();
				SelectedSemestre = Semestres.FirstOrDefault();
				SelectedClasse = Classes.FirstOrDefault();
				SelectedEvaluation = Evaluations.FirstOrDefault();

				// Chargement automatique des UEs si une classe et un semestre existent



			}
		}
		catch (Exception ex)
		{
			Console.WriteLine("Erreur de chargement des options: " + ex.Message);
		}
	}

	private async Task Credit()
	{
		if (!string.IsNullOrEmpty(SelectedUE) && !string.IsNullOrEmpty(SelectedEvaluation))
		{
			try
			{
				var url = $"http://localhost:5043/api/Options/credit?ue={SelectedUE}&codeEval={SelectedEvaluation}";
				var response = await Http.GetFromJsonAsync<int>(url); // Récupère un entier
				Echelles = response; // Stocke l'entier correctement
				SelectedEchelle = Echelles;
			}
			catch (Exception ex)
			{
				Console.WriteLine("Erreur de chargement du crédit : " + ex.Message);
				Echelles = 0; // Valeur par défaut en cas d'erreur
			}
		}
		else
		{
			Echelles = 0;
		}
	}
	private void InsertNote()
	{
		if (SelectedEvaluation == "SN")
		{
			if (string.IsNullOrEmpty(numAnonymat) || note < 0){
				insertnoteMessage = "Veuillez entrer un Numero d'anonymat";
				return;
			}


			if (note < 0 || note > SelectedEchelle)
			{
				insertnoteMessage = "La note doit etre comprise entre 0 et " + SelectedEchelle + " .";
				return;
			}

			notes.Add(new EtudiantNote
				{
					NumAnonymat = numAnonymat,
					Note = note,
					Observation = observation
				});
		}
		else
		{
			if (string.IsNullOrEmpty(matricule) || string.IsNullOrEmpty(nomPrenom) || note < 0)
				return;

			if (!System.Text.RegularExpressions.Regex.IsMatch(matricule, @"^\d{2}[A-Z]\d{4}$"))
			{
				insertnoteMessage = "Le matricule doit être au format 00X0000 (ex: 12A3456).";
				return;
			}

			if (note < 0 || note > SelectedEchelle)
			{
				insertnoteMessage = "La note doit etre comprise entre 0 et " + SelectedEchelle + " .";
				return;
			}

			notes.Add(new EtudiantNote
				{
					Matricule = matricule,
					NomPrenom = nomPrenom,
					Note = note,
					Observation = observation
				});
		}

		matricule = nomPrenom = numAnonymat = observation = insertnoteMessage = string.Empty;
		note = 0;
		StateHasChanged();
	}

	private EtudiantNote selectedNote = new EtudiantNote();
	private bool isEditing = false;

	private void EditNote(EtudiantNote notes)
	{
		selectedNote = new EtudiantNote
			{
				Matricule = notes.Matricule,
				NomPrenom = notes.NomPrenom,
				NumAnonymat = notes.NumAnonymat,
				Note = notes.Note,
				Observation = notes.Observation
			};

		// Charger les informations dans les champs
		matricule = selectedNote.Matricule ?? string.Empty;
		numAnonymat = selectedNote.NumAnonymat ?? string.Empty;
		note = selectedNote.Note;
		nomPrenom = selectedNote.NomPrenom ?? string.Empty;
		observation = selectedNote.Observation ?? string.Empty;

		isEditing = true;
	}


	//Quand on clique sur modifier devant une note:
	private void UpdateNote()
	{
		var noteToUpdate = notes.FirstOrDefault(n =>
			SelectedEvaluation == "SN" ? n.NumAnonymat == selectedNote.NumAnonymat
												: n.Matricule == selectedNote.Matricule);

		if (noteToUpdate != null)
		{
			noteToUpdate.Note = selectedNote.Note;
			noteToUpdate.Observation = selectedNote.Observation;
			isEditing = false;
			StateHasChanged();
		}
	}

	private void InsertIntoBD()
	{

	}

	private List<Dictionary<string, object>> notesList = new();

	private void OnFileSelected(InputFileChangeEventArgs e)
	{
		selectedFile = e.File;
	}

	private List<EtudiantNote> notes = new();
	private bool isLoading = false;
	private string errorMessage = "";

	private async Task LoadNotes()
	{
		isLoading = true;
		errorMessage = "";
		notes = new();
		StateHasChanged();

		try
		{
			var parameters = new Dictionary<string, string>
			{
				{ "codeUE", SelectedUE ?? string.Empty },
				{ "evaluation", SelectedEvaluation ?? string.Empty },
				{ "annee", SelectedAnnee ?? string.Empty },
				{ "semestre", SelectedSemestre ?? string.Empty },
				{ "codeClasse", SelectedClasse ?? string.Empty }
			};


			var queryString = string.Join("&", parameters.Select(p => $"{p.Key}={Uri.EscapeDataString(p.Value)}"));
			var response = await Http.GetFromJsonAsync<ApiResponse>($"http://localhost:5043/api/Notes/getnotes?{queryString}");

			notes = response?.Notes ?? new List<EtudiantNote>();
		}
		catch (Exception)
		{
			errorMessage = $"Cette evaluation n'existe pas ! Elle sera creer quand validerez les notes";
		}
		finally
		{
			isLoading = false;
		}
	}

	//Model pour les options
	private class OptionsResponse
	{
		public List<string> Annee { get; set; } = new();
		public List<string> Semestres { get; set; } = new();
		public List<string> Classes { get; set; } = new();
		public List<string> Evaluations { get; set; } = new();
	}

	//Model pour inserer ou mettre la BD a jours
	public class InsertNotesRequest
	{
		public string? Annee { get; set; }
		public string? Semestre { get; set; }
		public string? CodeClasse { get; set; }
		public string? CodeUE { get; set; }
		public string? Evaluation { get; set; }
		public int Echelle { get; set; }
		public List<EtudiantNote> ListeEtudiants { get; set; } = new();
	}

	public class EtudiantNote
	{
		public string? Matricule { get; set; }
		public string? NomPrenom { get; set; }
		public string? NumAnonymat { get; set; }
		public double Note { get; set; }
		public string? Observation { get; set; }
	}

	public class ApiResponse
	{
		public List<EtudiantNote> Notes { get; set; } = new();
	}
}
